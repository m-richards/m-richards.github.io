<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Packaging on Matt Richards - Blog</title><link>https://m-richards.github.io/categories/packaging/</link><description>Recent content in Packaging on Matt Richards - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Sun, 10 Sep 2023 20:17:43 +1000</lastBuildDate><atom:link href="https://m-richards.github.io/categories/packaging/index.xml" rel="self" type="application/rss+xml"/><item><title>Tidbits from the Scientific python development guide</title><link>https://m-richards.github.io/post/scientific_python_development_guide/</link><pubDate>Sun, 10 Sep 2023 20:17:43 +1000</pubDate><guid>https://m-richards.github.io/post/scientific_python_development_guide/</guid><description>Recently, the (Scientific Python development guide)[https://learn.scientific-python.org/development/] was (announced)[https://blog.scientific-python.org/scientific-python/dev-summit-1-development-guide/] and released, serving as a consolidation of existing developer guides outlining software development best practices in the scientific python ecosystem. It&amp;rsquo;s grown out of a collection of materials for (Scikit HEP)[https://scikit-hep.org/] which I&amp;rsquo;d first encountered years ago, looking for python support for ragged arrays and noted the very useful documentation pages.
It&amp;rsquo;s very nice to see a consensus backed series of guidelines and first principles in a consolidated location, as python packaging is esoteric at times, and has a long legacy of deprecated ways of doing things (which often are unfortunately still in regular use).</description></item><item><title>Exploring the cross platform dependency management situation in Python - Part 2: piptools internals</title><link>https://m-richards.github.io/post/python_dep_management2/</link><pubDate>Sun, 15 Jan 2023 21:45:40 +1100</pubDate><guid>https://m-richards.github.io/post/python_dep_management2/</guid><description>This is a continuation of [my previous post about pip-tools]({{&amp;lt; ref &amp;ldquo;python_dep_management.md&amp;rdquo; &amp;gt;}}), and the unsatisfying conclusion that it doesn&amp;rsquo;t handle generating cross platform requirements particularly elegantly. I started this investigation with the premise that it should be possible to generate a cross-platform environment specification from a single computer. This post determines the validity of that premise, by taking a peek at the internals of the pip-tools and its dependency solver.</description></item><item><title>Exploring the cross platform dependency management situation in Python: piptools</title><link>https://m-richards.github.io/post/python_dep_management/</link><pubDate>Sat, 14 Jan 2023 21:32:33 +1100</pubDate><guid>https://m-richards.github.io/post/python_dep_management/</guid><description>I&amp;rsquo;ve chosen to split this post into at least two parts, as the preamble to give context became a blog post in itself. So this first piece focuses the context around introducing stricter dependency management, and outlining the cracks that appear when trying to come up with a solution that works on multiple platforms.
Recently, I&amp;rsquo;ve been looking into transitioning a project (in this case, a large transport model dev codebase) from a heavy development cycle into a production like state.</description></item></channel></rss>