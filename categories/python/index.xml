<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Matt Richards - Blog</title><link>https://m-richards.github.io/categories/python/</link><description>Recent content in Python on Matt Richards - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Sat, 27 May 2023 12:09:28 +1000</lastBuildDate><atom:link href="https://m-richards.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Tips for success installing python packages</title><link>https://m-richards.github.io/post/geospatial_package_installation/</link><pubDate>Sat, 27 May 2023 12:09:28 +1000</pubDate><guid>https://m-richards.github.io/post/geospatial_package_installation/</guid><description>Although python has a functional story around packaging, there are plenty of footguns for people who only occasionally dabble with package management. This situation is fairly common in my line of work, when a project is started, the project team get set up with working developer environments, and then happily forget about packaging problems for the next x months until the next project starts. So this is a quick reference I hope to point people to the next time I get &amp;ldquo;my python environment isn&amp;rsquo;t working / I can&amp;rsquo;t install package x questions&amp;rdquo;.</description></item><item><title>Setting up a pandas/main environment for GeoPandas</title><link>https://m-richards.github.io/post/geopandas_dev_env/</link><pubDate>Sun, 05 Feb 2023 18:05:38 +1100</pubDate><guid>https://m-richards.github.io/post/geopandas_dev_env/</guid><description>Although it&amp;rsquo;s not something I tend to advertise very often, I&amp;rsquo;m a maintainer for GeoPandas which is the de-facto standard tool for tabular geospatial analysis in Python. My contributions here wax and wane here with the amount of free time and mental space I have to volunteer. As part of this, we keep the software in sync with developments in pandas, and our CI tests against pandas/main. From time to time (more frequently with the upcoming pandas 2.</description></item><item><title>Exploring the cross platform dependency management situation in Python - Part 2: piptools internals</title><link>https://m-richards.github.io/post/python_dep_management2/</link><pubDate>Sun, 15 Jan 2023 21:45:40 +1100</pubDate><guid>https://m-richards.github.io/post/python_dep_management2/</guid><description>This is a continuation of [my previous post about pip-tools]({{&amp;lt; ref &amp;ldquo;python_dep_management.md&amp;rdquo; &amp;gt;}}), and the unsatisfying conclusion that it doesn&amp;rsquo;t handle generating cross platform requirements particularly elegantly. I started this investigation with the premise that it should be possible to generate a cross-platform environment specification from a single computer. This post determines the validity of that premise, by taking a peek at the internals of the pip-tools and its dependency solver.</description></item><item><title>Exploring the cross platform dependency management situation in Python: piptools</title><link>https://m-richards.github.io/post/python_dep_management/</link><pubDate>Sat, 14 Jan 2023 21:32:33 +1100</pubDate><guid>https://m-richards.github.io/post/python_dep_management/</guid><description>I&amp;rsquo;ve chosen to split this post into at least two parts, as the preamble to give context became a blog post in itself. So this first piece focuses the context around introducing stricter dependency management, and outlining the cracks that appear when trying to come up with a solution that works on multiple platforms.
Recently, I&amp;rsquo;ve been looking into transitioning a project (in this case, a large transport model dev codebase) from a heavy development cycle into a production like state.</description></item></channel></rss>